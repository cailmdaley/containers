import numpy
import scipy
from spt3g import core, std_processing, gcp

def grab_data(frame, cmap_dict, data1 = [], data2 = [], data3 = []):

    if frame.type != core.G3FrameType.Timepoint:
        return
    try:
        bdata = []
        data1.append(frame['CalibratorOn'])
        data2.append(frame['EventHeader'])
        for key in cmap_dict:
            inds = cmap_dict[key]
            bdata.append(frame['DfMux'][inds[0]][inds[1]][inds[2]])
        data3.append(bdata)
    except:
        pass

bolos2get = ['2017.W158.1.12.3.3480',
'2017.W158.1.12.3.1990',
'2017.W158.1.12.3.4058',
'2017.W158.1.12.3.4122',
'2017.W158.1.12.3.2008',
'2017.W158.1.12.3.3526',
'2017.W158.1.12.3.2804',
'2017.W158.1.12.3.2382',
'2017.W158.1.12.3.2348',
'2017.W158.1.12.3.2882',
'2017.W158.1.12.3.2300',
'2017.W158.1.12.3.3350',
'2017.W158.1.12.3.2786',
'2017.W158.1.12.3.2090',
'2017.W158.1.12.3.4344',
'2017.W158.1.12.3.4420',
'2017.W158.1.12.3.2054',
'2017.W158.1.12.3.3244',
'2017.W158.1.12.3.1838',
'2017.W158.1.12.3.1890',
'2017.W158.1.12.3.2644',
'2017.W158.1.12.3.2244',
'2017.W158.1.12.3.2190',
'2017.W158.1.12.3.2668',
'2017.W158.1.12.3.1702',
'2017.W158.1.12.3.3990',
'2017.W158.1.12.3.3924',
'2017.W158.1.12.3.1676',
'2017.W158.1.12.3.3140',
'2017.W158.1.12.3.2604',
'2017.W158.1.12.3.1730',
'2017.W158.1.12.3.3784',
'2017.W158.1.12.3.3842',
'2017.W158.1.12.3.1742',
'2017.W158.1.12.3.2550',
'2017.W158.1.12.3.3036',
'2017.W158.1.12.3.2130',
'2017.W158.1.12.3.2158',
'2017.W158.1.12.3.3080',
'2017.W158.1.12.3.2460',
'2017.W158.1.12.3.1940',
'2017.W158.1.12.3.2518',
'2017.W158.1.12.3.2980',
'2017.W158.1.12.3.1824',
'2017.W158.1.12.3.3724',
'2017.W158.1.12.3.3658',
'2017.W158.1.12.3.1788',
'2017.W158.1.12.3.2918',
'2017.W158.2.12.5.1740',
'2017.W158.3.12.3.3506',
'2017.W158.3.12.3.2026',
'2017.W158.3.12.3.4146',
'2017.W158.3.12.3.2046',
'2017.W158.3.12.3.3560',
'2017.W158.3.12.3.2856',
'2017.W158.3.12.3.2388',
'2017.W158.3.12.3.2928',
'2017.W158.3.12.3.2342',
'2017.W158.3.12.3.2294',
'2017.W158.3.12.3.3376',
'2017.W158.3.12.3.2824',
'2017.W158.3.12.3.2770',
'2017.W158.3.12.3.3274',
'2017.W158.3.12.3.1876',
'2017.W158.3.12.3.4584',
'2017.W158.3.12.3.2682',
'2017.W158.3.12.3.2272',
'2017.W158.3.12.3.2224',
'2017.W158.3.12.3.2718',
'2017.W158.3.12.3.3212',
'2017.W158.3.12.3.1726',
'2017.W158.3.12.3.4008',
'2017.W158.3.12.3.3942',
'2017.W158.3.12.3.1702',
'2017.W158.3.12.3.3174',
'2017.W158.3.12.3.2640',
'2017.W158.3.12.3.1756',
'2017.W158.3.12.3.3808',
'2017.W158.3.12.3.3870',
'2017.W158.3.12.3.2586',
'2017.W158.3.12.3.3058',
'2017.W158.3.12.3.2194',
'2017.W158.3.12.3.3110',
'2017.W158.3.12.3.2506',
'2017.W158.3.12.3.1974',
'2017.W158.3.12.3.4214',
'2017.W158.3.12.3.1946',
'2017.W158.3.12.3.2550',
'2017.W158.3.12.3.3012',
'2017.W158.3.12.3.3748',
'2017.W158.3.12.3.3682',
'2017.W158.3.12.3.1818',
'2017.W158.3.12.3.2960',
'2017.W158.3.34.2.3550',
'2017.W158.3.34.2.4208',
'2017.W158.3.34.2.2080',
'2017.W158.3.34.2.3610',
'2017.W158.3.34.2.2918',
'2017.W158.3.34.2.2948',
'2017.W158.3.34.2.3502',
'2017.W158.3.34.2.2382',
'2017.W158.3.34.2.2334',
'2017.W158.3.34.2.2846',
'2017.W158.3.34.2.2150',
'2017.W158.3.34.2.4438',
'2017.W158.3.34.2.4502',
'2017.W158.3.34.2.2118',
'2017.W158.3.34.2.2818',
'2017.W158.3.34.2.4578',
'2017.W158.3.34.2.1942',
'2017.W158.3.34.2.3370',
'2017.W158.3.34.2.2710',
'2017.W158.3.34.2.2288',
'2017.W158.3.34.2.2266',
'2017.W158.3.34.2.2764',
'2017.W158.3.34.2.4002',
'2017.W158.3.34.2.1698',
'2017.W158.3.34.2.2676',
'2017.W158.3.34.2.1752',
'2017.W158.3.34.2.3938',
'2017.W158.3.34.2.1776',
'2017.W158.3.34.2.2630',
'2017.W158.3.34.2.3102',
'2017.W158.3.34.2.2184',
'2017.W158.3.34.2.2218',
'2017.W158.3.34.2.3164',
'2017.W158.3.34.2.2544',
'2017.W158.3.34.2.4360',
'2017.W158.3.34.2.2580',
'2017.W158.3.34.2.3054',
'2017.W158.3.34.2.1848',
'2017.W158.3.34.2.3740',
'2017.W158.3.34.2.1810',
'2017.W158.3.34.2.3006',
'2017.W158.3.56.4.3506',
'2017.W158.3.56.4.2024',
'2017.W158.3.56.4.4080',
'2017.W158.3.56.4.4148',
'2017.W158.3.56.4.2042',
'2017.W158.3.56.4.3560',
'2017.W158.3.56.4.2862',
'2017.W158.3.56.4.2386',
'2017.W158.3.56.4.2344',
'2017.W158.3.56.4.2296',
'2017.W158.3.56.4.2840',
'2017.W158.3.56.4.2128',
'2017.W158.3.56.4.4368',
'2017.W158.3.56.4.4448',
'2017.W158.3.56.4.2094',
'2017.W158.3.56.4.2782',
'2017.W158.3.56.4.4590',
'2017.W158.3.56.4.1920',
'2017.W158.3.56.4.2228',
'2017.W158.3.56.4.2720',
'2017.W158.3.56.4.1732',
'2017.W158.3.56.4.4016',
'2017.W158.3.56.4.3950',
'2017.W158.3.56.4.1714',
'2017.W158.3.56.4.3188',
'2017.W158.3.56.4.2654',
'2017.W158.3.56.4.1768',
'2017.W158.3.56.4.1792',
'2017.W158.3.56.4.2170',
'2017.W158.3.56.4.2206',
'2017.W158.3.56.4.1984',
'2017.W158.3.56.4.4224',
'2017.W158.3.56.4.1964',
'2017.W158.3.56.4.3030',
'2017.W158.3.56.4.1868',
'2017.W158.3.56.4.3760',
'2017.W158.3.56.4.1830',
'2017.W158.3.56.4.2976',
'2017.W158.3.78.1.3514',
'2017.W158.3.78.1.2030',
'2017.W158.3.78.1.4086',
'2017.W158.3.78.1.4152',
'2017.W158.3.78.1.2048',
'2017.W158.3.78.1.3564',
'2017.W158.3.78.1.2864',
'2017.W158.3.78.1.2428',
'2017.W158.3.78.1.2394',
'2017.W158.3.78.1.2934',
'2017.W158.3.78.1.2296',
'2017.W158.3.78.1.3384',
'2017.W158.3.78.1.2836',
'2017.W158.3.78.1.2128',
'2017.W158.3.78.1.4370',
'2017.W158.3.78.1.4448',
'2017.W158.3.78.1.2094',
'2017.W158.3.78.1.2780',
'2017.W158.3.78.1.3278',
'2017.W158.3.78.1.1878',
'2017.W158.3.78.1.4590',
'2017.W158.3.78.1.1922',
'2017.W158.3.78.1.3338',
'2017.W158.3.78.1.2688',
'2017.W158.3.78.1.2280',
'2017.W158.3.78.1.2226',
'2017.W158.3.78.1.2716',
'2017.W158.3.78.1.2652',
'2017.W158.3.78.1.1760',
'2017.W158.3.78.1.3812',
'2017.W158.3.78.1.3874',
'2017.W158.3.78.1.1782',
'2017.W158.3.78.1.2594',
'2017.W158.3.78.1.2166',
'2017.W158.3.78.1.2198',
'2017.W158.3.78.1.2558',
'2017.W158.3.78.1.3018',
'2017.W158.4.12.5.3484',
'2017.W158.4.12.5.2000',
'2017.W158.4.12.5.4060',
'2017.W158.4.12.5.4124',
'2017.W158.4.12.5.2012',
'2017.W158.4.12.5.3532',
'2017.W158.4.12.5.2820',
'2017.W158.4.12.5.2394',
'2017.W158.4.12.5.2360',
'2017.W158.4.12.5.2898',
'2017.W158.4.12.5.3428',
'2017.W158.4.12.5.2310',
'2017.W158.4.12.5.3358',
'2017.W158.4.12.5.2806',
'2017.W158.4.12.5.2106',
'2017.W158.4.12.5.4352',
'2017.W158.4.12.5.4428',
'2017.W158.4.12.5.2070',
'2017.W158.4.12.5.2746',
'2017.W158.4.12.5.3250',
'2017.W158.4.12.5.1852',
'2017.W158.4.12.5.4562',
'2017.W158.4.12.5.2660',
'2017.W158.4.12.5.2256',
'2017.W158.4.12.5.2196',
'2017.W158.4.12.5.3192',
'2017.W158.4.12.5.1712',
'2017.W158.4.12.5.3996',
'2017.W158.4.12.5.3930',
'2017.W158.4.12.5.1692',
'2017.W158.4.12.5.3162',
'2017.W158.4.12.5.2622',
'2017.W158.4.12.5.1740',
'2017.W158.4.12.5.3790',
'2017.W158.4.12.5.3852',
'2017.W158.4.12.5.1762',
'2017.W158.4.12.5.2566',
'2017.W158.4.12.5.3050',
'2017.W158.4.12.5.2140',
'2017.W158.4.12.5.2174',
'2017.W158.4.12.5.3088',
'2017.W158.4.12.5.2474',
'2017.W158.4.12.5.4198',
'2017.W158.4.12.5.1934',
'2017.W158.4.12.5.2536',
'2017.W158.4.12.5.3002',
'2017.W158.4.12.5.1842',
'2017.W158.4.12.5.3738',
'2017.W158.4.12.5.3666',
'2017.W158.4.12.5.1800',
'2017.W158.4.12.5.2930',
'2017.W152.3.34.2.3550',
'2017.W152.3.34.2.4212',
'2017.W153.3.34.2.2886',
'2017.W153.3.34.2.2992',
'2017.W153.6.34.4.2816',
'2017.W153.6.34.4.4978',
'2017.W153.6.34.4.2810',
'2017.W153.6.34.4.4812',
'2017.W153.6.34.4.3188',
'2017.W153.6.56.2.4986',
'2017.W153.6.56.2.5074',
'2017.W153.6.56.2.1860',
'2017.W153.6.56.2.4570',
'2017.W153.6.56.2.4502',
'2017.W153.6.56.2.3322',
'2017.W153.6.56.2.4904',
'2017.W153.6.56.2.2208',
'2017.W153.6.56.2.3794',
'2017.W153.6.56.2.3856',
'2017.W153.6.56.2.4654',
'2017.W153.6.56.2.4736',
'2017.W153.6.56.2.3098',
'2017.W153.6.56.2.1960',
'2017.W153.6.56.2.4208',
'2017.W153.6.56.2.3738',
'2017.W153.6.56.2.1804',
'2017.W153.6.78.3.5152',
'2017.W153.6.78.3.2274',
'2017.W153.6.78.3.1866',
'2017.W153.6.78.3.2266',
'2017.W153.6.78.3.2208',
'2017.W153.6.78.3.1754',
'2017.W153.6.78.3.3800',
'2017.W153.6.78.3.3862',
'2017.W153.6.78.3.1772',
'2017.W153.6.78.3.2154',
'2017.W153.6.78.3.4744',
'2017.W153.6.78.3.2192',
'2017.W153.6.78.3.4208',
'2017.W153.6.78.3.1852',
'2017.W153.6.78.3.3746',
'2017.W139.3.12.3.3488',
'2017.W139.3.12.3.2110',
'2017.W139.3.12.3.1866',
'2017.W139.3.12.3.1902',
'2017.W139.3.12.3.2672',
'2017.W139.3.12.3.2710',
'2017.W139.3.12.3.1718',
'2017.W139.3.12.3.1750',
'2017.W139.3.12.3.1774',
'2017.W139.3.12.3.3102',
'2017.W139.3.12.3.2492',
'2017.W139.3.12.3.1968',
'2017.W139.3.12.3.1940',
'2017.W139.3.12.3.3008',
'2017.W139.3.12.3.1852',
'2017.W139.3.12.3.1810',
'2017.W136.4.56.8.3476',
'2017.W136.4.56.8.4120',
'2017.W136.4.56.8.2006',
'2017.W136.4.56.8.3522',
'2017.W136.4.56.8.4972',
'2017.W136.4.56.8.3418',
'2017.W136.4.56.8.2048',
'2017.W136.4.56.8.4800',
'2017.W136.4.56.8.3780',
'2017.W136.4.56.8.4722',
'2017.W136.5.1.6.282',
'2017.W136.5.1.6.350',
'2017.W136.5.1.6.414',
'2017.W136.5.1.6.488',
'2017.W136.5.1.6.588',
'2017.W136.5.1.6.646',
'2017.W136.5.1.6.758',
'2017.W136.5.1.6.812',
'2017.W136.5.1.6.884',
'2017.W136.5.1.6.934',
'2017.W136.5.1.6.1016',
'2017.W136.5.1.6.1072',
'2017.W136.5.1.5.322',
'2017.W136.5.1.5.370',
'2017.W136.5.1.5.438',
'2017.W136.5.1.5.506',
'2017.W136.5.1.5.554',
'2017.W136.5.1.5.610',
'2017.W136.5.1.5.678',
'2017.W136.5.1.5.850',
'2017.W136.5.1.5.900',
'2017.W136.5.1.5.966',
'2017.W136.5.1.5.1016',
'2017.W136.5.1.8.288',
'2017.W136.5.1.8.348',
'2017.W136.5.1.8.408',
'2017.W136.5.1.8.666',
'2017.W136.5.1.8.762',
'2017.W136.5.1.8.1088',
'2017.W136.5.2.4.320',
'2017.W136.5.2.4.370',
'2017.W136.5.2.4.554',
'2017.W136.5.2.4.612',
'2017.W136.5.2.4.674',
'2017.W136.5.2.4.732',
'2017.W136.5.2.4.846',
'2017.W136.5.2.4.914',
'2017.W136.5.2.4.968',
'2017.W136.5.2.1.288',
'2017.W136.5.2.1.346',
'2017.W136.5.2.1.408',
'2017.W136.5.2.1.460',
'2017.W136.5.2.1.530',
'2017.W136.5.2.1.586',
'2017.W136.5.2.1.626',
'2017.W136.5.2.1.668',
'2017.W136.5.2.1.754',
'2017.W136.5.2.1.906',
'2017.W136.5.2.1.1032',
'2017.W136.5.2.2.318',
'2017.W136.5.2.2.362',
'2017.W136.5.2.2.432',
'2017.W136.5.2.2.498',
'2017.W136.5.2.2.662',
'2017.W136.5.2.2.730',
'2017.W136.5.2.2.788',
'2017.W136.5.2.2.840',
'2017.W136.5.2.2.904',
'2017.W136.5.3.3.286',
'2017.W136.5.3.3.344',
'2017.W136.5.3.3.414',
'2017.W136.5.3.3.464',
'2017.W136.5.3.3.574',
'2017.W136.5.3.3.622',
'2017.W136.5.3.3.678',
'2017.W136.5.3.3.752',
'2017.W136.5.3.3.802',
'2017.W136.5.3.3.866',
'2017.W136.5.3.3.924',
'2017.W136.5.3.3.1010',
'2017.W136.5.3.4.428',
'2017.W136.5.3.4.492',
'2017.W136.5.3.4.666',
'2017.W136.5.3.4.774',
'2017.W136.5.3.1.288',
'2017.W136.5.3.1.338',
'2017.W136.5.3.1.412',
'2017.W136.5.3.1.464',
'2017.W136.5.3.1.568',
'2017.W136.5.3.1.622',
'2017.W136.5.3.1.678',
'2017.W136.5.3.1.758',
'2017.W136.5.3.1.810',
'2017.W136.5.4.5.324',
'2017.W136.5.4.5.372',
'2017.W136.5.4.5.414',
'2017.W136.5.4.5.490',
'2017.W136.5.4.5.546',
'2017.W136.5.4.5.616',
'2017.W136.5.4.5.726',
'2017.W136.5.4.5.778',
'2017.W136.5.4.5.838',
'2017.W136.5.4.5.908',
'2017.W136.5.4.5.988',
'2017.W136.5.4.5.1028',
'2017.W136.5.4.8.288',
'2017.W136.5.4.8.348',
'2017.W136.5.4.8.400',
'2017.W136.5.4.8.514',
'2017.W136.5.4.8.634',
'2017.W136.5.4.8.780',
'2017.W136.5.4.8.884',
'2017.W136.5.4.8.938',
'2017.W136.5.4.8.1088',
'2017.W136.5.4.8.1190',
'2017.W136.5.4.7.312',
'2017.W136.5.4.7.434',
'2017.W136.5.4.7.500',
'2017.W136.5.4.7.728',
'2017.W136.5.4.7.772',
'2017.W136.5.4.7.848',
'2017.W136.5.4.7.912']

dir1 = '/poleanalysis/sptdaq/20170129_rawdata/'
fname0 = dir1 + '20170129_194237.g3'
f1 = core.G3File(fname0)
wframe = f1.next()
wmap = wframe['WiringMap']
bnames = np.asarray(wmap.keys())
cframe = f1.next()
bp = cframe['NominalBolometerProperties']

cmap_dict = {}
for key in bolos2get:
    fkey = filter(None,key.split('.'))
    wafername = fkey[1]
    key2 = wafername + '/' + key
    wmk = wmap[key2]
    ilist = [wmk.board_serial, wmk.module, wmk.channel*2]
    cmap_dict[key2] = ilist
names = cmap_dict.keys()

fname1 = dir1 + '20170129_202437.g3'
files = [fname1]

data1 = []
data2 = []
data3 = []

for fname in files:
    for frame in core.G3File(fname):
        grab_data(frame, cmap_dict, data1 = data1, data2 = data2, data3 = data3)

bdata = np.zeros([len(data3[0]),len(data3)])
for i in np.arange(len(data3)):
    bdata[:,i] = data3[i]

npts_psd = 1024
win = np.hanning(npts_psd)
freqs = np.arange(npts_psd/2)/np.float(npts_psd/2)*76.5
psds = np.zeros([len(names),npts_psd])
for i in np.arange(len(names)):
    thisbdata = bdata[i,:] - np.mean(bdata[i,:])
    for j in np.arange(len(thisbdata)/1024):
        psds[i,:] += (np.abs(np.fft.fft(thisbdata[npts_psd*j:npts_psd*(j+1)])))**2
psds = np.sqrt(psds)

whwhite = np.where(np.logical_and(freqs > 10., freqs < 20.))
whitenoise_cts = np.zeros(len(names))
for i in np.arange(len(names)):
    psdtemp = psds[i,:]
    whitenoise_cts[i] = np.sqrt(np.mean(psdtemp[whwhite]**2))
