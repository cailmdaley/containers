#!/usr/bin/env python

import os
import glob
import shutil
import subprocess as sp
import shlex
import re
import sys
from warnings import warn

inroot = '/spt/data/pydfmux_output'
outroot = '/big_scratch/pydfmux_output'

if len(sys.argv) > 1:
    pydfmux_files = sys.argv[1:]
    force = True
else:
    pydfmux_files = sorted(glob.glob(os.path.join(inroot, 'aux-pydfmux_*.tar.gz')))
    force = False

os.chdir(outroot)

header = False
verbose = False

for tarpath in pydfmux_files:

    # extract directory name
    m = re.search('aux-pydfmux_(.*).tar.gz', tarpath)
    if m:
        relpath, = m.groups()
    else:
        warn('Mangled filename {}, skipping'.format(tarpath))
        continue

    # skip if already processed
    relpath = relpath.replace('__', '/')
    if os.path.exists(relpath) and not force:
        continue

    abspath = os.path.join(outroot, relpath)
    absdate = os.path.join(outroot, relpath.split('/')[0])

    if not header:
        print('Processing compressed pydfmux data directories...\n')
        header = True

    # extract
    if verbose:
        print('*' * 50)
        print('Extracting {} to {}'.format(tarpath, abspath))
    else:
        print(tarpath)
    cmd = shlex.split('tar -xzf {}'.format(tarpath))

    try:
        sp.check_call(cmd)
    except Exception as e:
        warn('Extraction failed:\n{}'.format(e))
    else:

        # set permissions
        if verbose:
            print('Setting permissions for {}'.format(abspath))
        cmd1 = 'find {} -type f -exec chmod og-w {{}} \;'.format(abspath)
        cmd2 = 'find {} -type d -exec chmod o-w,g+w {{}} \;'.format(abspath)
        cmd3 = 'chmod o-w,g+w {}'.format(absdate)

        try:
            if verbose:
                print(cmd1)
            sp.check_call(shlex.split(cmd1))
            if verbose:
                print(cmd2)
            sp.check_call(shlex.split(cmd2))
            if verbose:
                print(cmd3)
            sp.check_call(shlex.split(cmd3))
        except Exception as e:
            warn('Permissions failed:\n{}'.format(e))
        else:
            if verbose:
                print('Extraction of {} complete'.format(abspath))

    if verbose:
        print('=' * 50 + '\n')
